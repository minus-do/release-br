name: move commits

on:
  workflow_dispatch:
    inputs:
      branch_name:
        type: string
        default: release
      minor:
        type: string

jobs:
  get_tags:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_name }}
          token: ${{ secrets.MY_PAT }}
          fetch-depth: 0

      - name: list tags
        run: |

          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/git/matching-refs/tags --jq '.[] | {tag: .ref, sha: .object.sha}' > tags_and_shas.json

          cat tags_and_shas.json
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tags_and_shas
          path: tags_and_shas.json

      - name: list tags and create release
        run: |
          echo 'CREATE RELEASES FROM TAGS'

          while IFS= read -r tag_sha; do
              echo "Processing: $tag_sha"  # Debugging: Print the raw JSON object
              tag=$(echo "$tag_sha" | jq -r '.tag')
              sha=$(echo "$tag_sha" | jq -r '.sha')
              release_name=$(echo "$tag" | sed 's|refs/tags/||')
              if git branch --contains "$sha" | grep -q "release"; then
                  echo "$sha belongs to the release branch (tag: $tag)"
                  echo "$sha" >> release_commits.txt
                  # Create a release with the name matching the tag
                  gh release create "$release_name" --tag "$tag" --target "$sha" --title "$release_name" --notes "Release for $release_name" --latest false
              else
                  echo "$sha does not belong to the release branch (tag: $tag)"
              fi
          done < tags_and_shas.json

          echo '==============================================='
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}

      - name: list all commits
        if: false
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/git/matching-refs/tags --jq '.[].object.sha' > commits.txt

          cat commits.txt

          echo '' > release_commits.txt

          # Read the commit SHAs from commits.txt and check if they belong to the release branch
          while IFS= read -r sha; do
              if git branch --contains "$sha" | grep -q "release"; then
                  echo "$sha belongs to the release branch"
                  echo "$sha" >> release_commits.txt
              else
                  echo "$sha does not belong to the release branch"
              fi
          done < commits.txt

          echo "=================================="
          cat release_commits.txt

          # git branch

          # echo START
          # git config --global user.email "snsinahub@github.com"
          # git config --global user.name "${{ github.actor }}"

          # # Read the commit hashes from the file
          # releaseMajor=1
          # releaseMinor=${{ inputs.minor }}
          # releasePatch=0
          # release=$releaseMajor.$releaseMinor.$releasePatch
          # touch reporel.txt
          # ls -l
          # while IFS= read -r commit; do
              
          #     echo RELEASE $release
          #     echo $commit
          #     # Check if the commit is part of the release branch
          #     git tag -a -f $release $commit -m "$release-$commit"
              
              
          #     echo AFTER INCREMENT $release
          #     echo $release >> reporel.txt
          #     releaseMinor=$((releaseMinor + 1))
          #     release=$releaseMajor.$releaseMinor.$releasePatch
          # done < commits.txt
          
          # git push origin --tags

          # echo "add to release"
          # ls -l
          
          # cat reporel.txt
          
          # echo read release file

          # if [[ ! -f reporel.txt ]]; then
          #     echo "reporel.txt not found!"
          #     exit 1
          # fi

          # if [[ -f reporel.txt ]]; then
          #     echo "reporel.txt has been found!"
          # fi
          
          # # Read the contents of releases.txt and echo each line
          # while IFS= read -r line; do
          #     echo "$line"
          #     # gh release create "$line" --title "$line" --latest false
          #     gh release create $line --latest=false 
          # done < reporel.txt
          
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}
          
